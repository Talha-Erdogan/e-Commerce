@using e_Commerce.Web.Business.Common
@using e_Commerce.Web.Business.Enums
@using e_Commerce.Web.Controllers

@model e_Commerce.Web.Models.Product.AddViewModel

@{
    ViewData["Title"] = "Edit";
}

<div class="row">
    <div class="col-md-12">
        <div class="card">
            <div class="card-header">
                <strong>Product Edit </strong>
            </div>
            <div class="card-body">

                @using (Html.BeginForm("Edit", "Product", FormMethod.Post, new { @class = "form-horizontal input-sm", @enctype = "multipart/form-data", id = "formProductAdd" }))
                {
                    @Html.HiddenFor(m => m.SessionImageFileName)
                    @Html.HiddenFor(m => m.SessionGuid)
                    @Html.HiddenFor(m => m.Id)

                    <div class="form-group row">
                        <label class="col-md-2 col-form-label">Name TR</label>
                        <div class="col-md-4">
                            @Html.TextBoxFor(m => m.NameTR, new { @class = "form-control input-sm" })
                            @Html.ValidationMessageFor(m => m.NameTR, null, new { @class = "help-block text-danger" })
                        </div>

                        <label class="col-md-2 col-form-label">Name EN</label>
                        <div class="col-md-4">
                            @Html.TextBoxFor(m => m.NameEN, new { @class = "form-control input-sm" })
                            @Html.ValidationMessageFor(m => m.NameEN, null, new { @class = "help-block text-danger" })
                        </div>
                    </div>

                    <div class="form-group row">
                        <label class="col-md-2 col-form-label">Description TR</label>
                        <div class="col-md-4">
                            @Html.TextAreaFor(m => m.DescriptionTR, 5, 20, new { @class = "form-control input-sm" })
                            @Html.ValidationMessageFor(m => m.DescriptionTR, null, new { @class = "help-block text-danger" })
                        </div>

                        <label class="col-md-2 col-form-label">Description EN</label>
                        <div class="col-md-4">
                            @Html.TextAreaFor(m => m.DescriptionEN, 5, 20, new { @class = "form-control input-sm" })
                            @Html.ValidationMessageFor(m => m.DescriptionEN, null, new { @class = "help-block text-danger" })
                        </div>
                    </div>

                    <div class="form-group row">
                        <label class="col-md-2 col-form-label">Image </label>
                        @if (string.IsNullOrEmpty(Model.SessionImageFileName))
                        {
                            <div class="col-md-4">
                                @Html.TextBoxFor(m => m.ImageFilePath, new { @class = "", @type = "file", @name = "ImageFilePath", @id = "ImageFilePath", required = "required" })
                                @Html.ValidationMessageFor(m => m.ImageFilePath, null, new { @class = "help-block text-danger" })
                                <div style="color:red;">
                                    @Model.SessionImageFileName
                                </div>
                               

                            </div>
                        }
                        else
                        {
                            <div class="col-md-4">
                                @Html.TextBoxFor(m => m.ImageFilePath, new { @class = "", @type = "file", @name = "ImageFilePath", @id = "ImageFilePath" })
                                @Html.ValidationMessageFor(m => m.ImageFilePath, null, new { @class = "help-block text-danger" })
                                <div style="color:red;">
                                    @Model.SessionImageFileName
                                </div>
                               

                            </div>
                        }

                    </div>

                    <div class="form-group row">
                        <label class="col-md-2 col-form-label">Category</label>
                        <div class="col-md-4">
                            @Html.DropDownListFor(m => m.CategoryId, Model.CategorySelectList, "Select", new { @class = "form-control form-control-sm" })
                            @Html.ValidationMessageFor(m => m.DescriptionTR, null, new { @class = "help-block text-danger" })
                        </div>
                    </div>

                    <div class="form-group row">
                        <div class="col-md-12 text-center mt-4">
                            <button class="btn btn-sm btn-primary" type="submit" id="btnSubmit">
                                <i class="fa fa-dot-circle-o"></i> Save
                            </button>
                            &nbsp;
                            @if (SessionHelper.CheckAuthForCurrentUser(AuthCodeStatic.PAGE_PRODUCT_LIST))
                            {
                                <a class="btn btn-sm btn-danger" href="~/Product/List">
                                    <i class="fa fa-ban"></i> Cancel
                                </a>
                            }
                            else
                            {
                                <a class="btn btn-sm btn-danger" href="~/Home/Index">
                                    <i class="fa fa-ban"></i> Cancel
                                </a>
                            }

                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-12">

                            @if (ViewBag.ErrorMessage != null && !string.IsNullOrEmpty(ViewBag.ErrorMessage))
                            {
                                <div class="text-danger">
                                    @ViewBag.ErrorMessage
                                </div>
                            }
                            @if (ViewBag.ErrorMessageList != null)
                            {
                                <div class="text-danger">
                                    @foreach (var item in ViewBag.ErrorMessageList)
                                    {
                                        <span>@item</span>
                                        <br />
                                    }
                                </div>
                            }

                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
    <!-- /.col-->
</div>


@section Scripts
{

    <script>

        $(document).ready(function () {
            // başlangıc: date-control class'ı eklenerek -> sayfadaki takvim scriptlerinin çalışması sağlanır.
            moment.locale("@SessionHelper.CurrentLanguageTwoChar");
            $.validator.messages.required = 'Is Required';
            $(".date-control").daterangepicker({
                singleDatePicker: true,
                showDropdowns: true,
                minYear: parseInt(moment().subtract(10, 'years').format('YYYY'), 10),
                maxYear: parseInt(moment().add(10, 'years').format('YYYY'), 10),
                autoUpdateInput: false,

                timePicker: true,
                timePicker24Hour: true,

                singleClasses: "",
                locale: {}
            });

            $('.date-control').on('apply.daterangepicker', function (ev, picker) {
                //$(this).val(picker.startDate.format('L'));
                "@SessionHelper.CurrentLanguageTwoChar" == "tr" ?
                    $(this).val(picker.startDate.format('DD.MM.YYYY HH:mm')) :
                    $(this).val(picker.startDate.format('MM/DD/YYYY HH:mm'));
            });


            $('.date-control').on('cancel.daterangepicker', function (ev, picker) {
                $(this).val('');
            });
            // bitiş: date-control class'ı eklenerek -> sayfadaki takvim scriptlerinin çalışması sağlanır.
        });

    //işlem yapılıyor pop-up'ının gösterilmesi (layout'ta)
    function DisplayModalProcessing() {
        // modalların z index ataması olayından dolayı gosterim hizli olmuyor, modal gosterim de timeout'a koyuldu
        setTimeout(function () {
            $("#modalProcessing").modal("show");
        }, 0);
    }

    //işlem yapılıyor pop-up'ının gizlenmesi (layout'ta)
    function HideModalProcessing() {
        // modalların z index ataması olayından dolayı gosterim hizli olmuyor, modal gosterim de timeout'a koyuldu
        //  kapatma 100 ms saniye sonra saglandi
        setTimeout(function () {
            $("#modalProcessing").modal("hide");
        }, 600);
    }
</script>
}